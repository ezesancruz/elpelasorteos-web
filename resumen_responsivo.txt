Resumen de ajustes y criterios de diseño responsivo (fondo en móvil)

Contexto del problema
- Síntoma reportado: en móvil la imagen/video de fondo no cubría toda la pantalla; se veía concentrada en el tercio superior. Además, al hacer scroll hacia abajo, el fondo parecía desplazarse hacia arriba ligeramente.
- Variabilidad: el efecto cambiaba según el dispositivo (algunos desplazaban más, otros menos), y el recorte visible de la imagen no era idéntico entre móviles.

Análisis de causa
- Viewport móvil cambiante: en iOS/Android, la barra de direcciones se oculta/muestra al scrollear y modifica la altura visible. Con `position: fixed` y alturas basadas en `vh`/`dvh`, el fondo “salta” o parece moverse porque el viewport cambia.
- Unidades de viewport dispares: `vh`, `dvh`, `svh`, `lvh` no están soportadas de forma homogénea en todos los navegadores/versiones. Según el soporte, el resultado puede ser estable o sufrir “jitter”.
- Estrategia de imagen original: el fondo con imagen se renderizaba mediante un `div` (producido por `createImg`) dentro de `#background-media`, mientras el CSS esperaba `#background-media > img`/`video`. Esto podía impedir que la imagen cubriera realmente el viewport en ciertos móviles.
- Recorte por relación de aspecto: con `object-fit: cover`, nunca se ve el 100% de la imagen en todos los dispositivos. Se recorta algo para llenar sin deformar, y esa porción varía según la relación de aspecto de cada móvil.
- Posibles efectos colaterales: cache de CSS (CDN/navegador), diferencias Safari iOS vs. Chrome Android en el manejo de capas fijas y repintado.

Cambios aplicados
1) CSS (`styles/main.css`)
   - Capas de fondo fijas (con `vh` + variantes):
     - `#background-media`, `#background-overlay` usan `position: fixed; inset: 0; width: 100vw; height: 100vh; height: 100dvh; height: 100lvh;`. Ver `styles/main.css:35`.
   - Ajuste de contenido del fondo:
     - `#background-media > video, #background-media > img` usan `width: 100%; height: 100%; object-fit: cover; object-position: center; display: block;`. Ver `styles/main.css:59`.
   - Modo opcional “contain + blur” (para mostrar la imagen completa sin deformar y rellenar con blur):
     - Estilos para `.bg-blur` (cubre con blur) y `.bg-contain` (imagen nítida centrada sin recorte), ambas absolutas. Ver `styles/main.css:69` y `styles/main.css:82`.
   - Anti-jitter iOS:
     - `#background-media { will-change: transform; transform: translateZ(0); }` como hint de composición (mitiga en algunos casos). Ver `styles/main.css:50`.

2) JS (`scripts/app.js`)
   - `renderBackground(background)` reescrito para:
     - Usar elementos `<img>`/`<video>` directos como hijos de `#background-media` (ya no `createImg`), afinando el match con el CSS.
     - Soportar `fitStrategy` (por ahora: `cover` por defecto, y `contain-blur` opcional) y `position` (foco de la imagen con `object-position`).
     - Fallback automático de video a imagen cuando `video.play()` es bloqueado en móvil (autoplay/inline).
     - Mantener `#background-overlay` oculto si hay media.
   - Referencia: función `renderBackground` en `scripts/app.js:122`.

Resultados tras los cambios
- Cobertura visual: en pruebas del usuario, Android e iOS mostraron bien el fondo (cubre correctamente y se ve nítido con el recorte centrado).
- Persistencia del “desplazamiento al scrollear”: se observó que en algunos dispositivos el fondo aún parece moverse levemente hacia arriba al scrollear hacia abajo. Esto se atribuye a:
  - Soporte parcial/variado de `lvh/dvh` (el navegador puede estar cayendo a `vh` dinámico).
  - Diferencias de implementación del viewport en Safari iOS/Chrome Android.
  - Caché de CSS en ciertos dispositivos/entornos.

Propuestas (opciones avanzadas, actualmente desactivadas por regresión visual)
1) Estrategia “sin vh” en el layout del fondo (ROLLED BACK)
   - Se probó quitar `height` y usar hijos absolutos con `inset: 0`. Empeoró el resultado visual en algunos móviles y se revirtió. Puede reintentarse con pruebas controladas si se desea.

2) Unidades de viewport seguras
   - Probar `100svh` (small viewport height) como prioridad, con `100lvh`/`100dvh` y fallback `100vh` por detrás.
   - Según el soporte del navegador, `svh` puede ser más estable durante scroll.

3) Fallback JS robusto para altura
   - Definir `--vh` en runtime con `window.innerHeight` y aplicarlo: `height: calc(var(--vh) * 100)` solo para el contenedor del fondo.
   - Recalcular en `resize`/`orientationchange` (throttled). Este patrón suele ser el más confiable en iOS antiguos.

4) Cache busting controlado
   - Versionar `styles/main.css` (por ejemplo `styles/main.css?v=2`) o usar `Cache-Control` apropiado para asegurar que los móviles carguen la hoja actualizada.
   - Confirmar ausencia de Service Worker (no se encontró registro en el repo) o reglas de CDN que sirvan versiones viejas.

5) Estrategia visual del fondo
   - “cover” centrado (actual): ocupa todo sin deformar, acepta recorte lateral/vertical según pantalla. Se puede ajustar el foco con `background.position` (ej. `"50% 35%"`).
   - “contain + blur”: muestra la imagen completa sin recorte y rellena con la misma imagen difuminada. Se activó brevemente y se revirtió por cambio visual no deseado; queda disponible como opción si se ajusta el diseño.

Cómo activar el modo “contain-blur” (actualmente desactivado)
- En `data/site-content.json`, dentro de `theme.background` (ver `data/site-content.json:17`), se puede agregar:
  - `"fitStrategy": "contain-blur"`
  - `"position": "center"` (opcional; admite valores tipo `"50% 35%"`)

Recomendaciones de diseño responsivo (guía para quien continúe)
- No diseñar por modelo de celular: el enfoque responsivo usa reglas generales y pocos breakpoints (p. ej., 480/768/1024 px).
- Usar layouts fluidos: `flex`, `grid`, `clamp()` para tipografías/espacios, tamaños relativos.
- Imágenes adaptativas: `object-fit` y `aspect-ratio` para controlar recorte/contención; `srcset/sizes` para rendimiento.
- Viewport móvil moderno: preferir `svh/lvh/dvh` con fallbacks; evaluar fallback JS si hay jitter en iOS.
- Áreas seguras iOS: usar `padding` con `env(safe-area-inset-*)` para evitar solaparse con notch/home-indicator.
- Accesibilidad/legibilidad: contrastes suficientes, tamaños mínimos táctiles, foco visible.
- Rendimiento: optimizar pesos de imagen; considerar `image-set`/WebP/AVIF cuando sea posible.

Validación sugerida
- Probar en:
  - Safari iOS (2–3 versiones recientes), Chrome Android (actual y anterior) y emulación de Chrome DevTools.
  - Distintas relaciones de aspecto (16:9, 19.5:9, 20:9…).
- Verificar:
  - El fondo no “salta” en scroll y cubre toda la pantalla.
  - En “cover”, el foco visual queda donde se espera (ajustar `position` si hace falta).
  - En “contain-blur”, la imagen nítida completa se ve centrada y el blur cubre los bordes sin artefactos.
  - El video reproduce muted/inline; si no, el fallback a imagen es correcto.
- Limpiar caché o forzar recarga dura al validar.

Archivos modificados
- `styles/main.css`
  - Capas del fondo fijas: `#background-media`, `#background-overlay` con `vh/dvh/lvh` y hints anti-jitter.
  - Hijos del fondo con `width/height: 100%`, `object-fit: cover; object-position: center;` y clases para modo `contain-blur` (opcional).
- `scripts/app.js`
  - `renderBackground(...)`: 
    - Cambiado a `<img>/<video>` directos.
    - `fitStrategy` (`cover` | `contain-blur`) y `position` configurables desde `theme.background`.
    - Fallback de video a imagen si `play()` falla en móvil.
- `data/site-content.json`
  - Actualmente sin `fitStrategy`/`position` para mantener “cover” por defecto (se pueden reactivar si se decide).

Referencias a código (rutas y líneas)
- Contenedor de fondo fijo: `styles/main.css:35`
- Contenido del fondo absoluto: `styles/main.css:59`
- Blur y contain: `styles/main.css:69`, `styles/main.css:82`
- Hint anti-jitter: `styles/main.css:50`
- Render del fondo (JS): `scripts/app.js:122`
- Configuración del fondo (contenido): `data/site-content.json:17`

Lo que funcionó
- El fondo ahora cubre correctamente y se ve centrado en Android e iOS, con buena calidad y sin deformar (en modo `cover`).
- El fallback de video a imagen evita pantallas negras o fondos “rotos” si el autoplay no está permitido.

Lo que aún puede variar según dispositivo
- En algunos móviles persiste una leve sensación de desplazamiento del fondo al scrollear hacia abajo. Causas:
  - Diferente soporte/interacción de `vh/dvh/lvh`.
  - Diferencias de implementación del viewport en navegadores móviles.
  - Caché de estilos no actualizado.

Opciones para cerrar el tema del desplazamiento
- Implementar la estrategia “sin vh” (hijos absolutos con `inset: 0`) y/o fallback JS `--vh`.
- Añadir `100svh` como primera opción para navegadores compatibles.
- Asegurar cache busting de la hoja de estilos.

Decisiones a tomar
- ¿Mantener `cover` con foco ajustado o cambiar a `contain-blur`? (Depende de si es aceptable recortar algo de la imagen.)
- ¿Aplicar estrategia “sin vh” y/o fallback JS `--vh` para erradicar el jitter restante en todos los móviles?

Notas finales
- “Responsivo” no implica desarrollar por modelo de teléfono. Se logra con reglas adaptativas, estrategias de imagen bien definidas y unidades de viewport modernas con fallbacks. Aun así, por las diferencias entre navegadores y relaciones de aspecto, el recorte visible de una imagen de fondo variará entre dispositivos; es normal y esperado con `cover`.
