Resumen integral del chat sobre fondos (imagen y video)

1) Contexto inicial y problema reportado
- Al seleccionar el “Tipo de fondo” (imagen o video), no se podían cargar otros archivos: aparecía la opción de seleccionar archivo pero daba un problema. Este fallo ocurría únicamente en la sección “Tipo de fondo”; en otras áreas donde se suben imágenes la carga funcionaba bien.

2) Investigación y hallazgos
- Repositorio inspeccionado: se encontró un editor visual en `scripts/editor.js` y el servidor en `server/editor-server.js`.
- Subida de archivos:
  - Existía endpoint para subir IMÁGENES: `POST /api/upload` (con Multer + Sharp). Requiere sesión admin.
  - No existía endpoint para subir VIDEOS: cualquier intento de subir video fallaba porque el endpoint aceptaba sólo tipos de imagen.
- Editor de tema/fondos:
  - En “Tema y fondos” se podía pegar una URL de video, pero no subir un archivo de video.
  - Para “Imagen de fondo” el editor sí ofrece botón de archivo (flujo de imagen), pero el problema original indicaba fallos al intentar subir contenidos específicamente desde el bloque de fondo.
- Cropeado (recorte/posicionamiento):
  - El editor guarda recortes en objetos de imagen como `{ crop: { zoom, offsetX, offsetY, aspect } }` y además genera un `thumb` recortado.
  - Otras secciones muestran el `thumb` (recortado) o aplican correctamente el crop.
  - El “fondo imagen” se renderizaba con `createImg(background.image, '')` sin aplicar las transformaciones de crop (zoom/offset), por eso el recorte no se veía sólo en el fondo.

3) Cambios realizados (implementados)
- Soporte para subir videos desde el editor (nuevo endpoint y botón):
  - Servidor: `server/editor-server.js`
    - Se agregó `videoUpload` (Multer) y el endpoint `POST /api/upload-video` que guarda el archivo tal cual en `/uploads` y responde `{ url }`. Requiere admin.
  - Editor: `scripts/editor.js`
    - Nueva función `uploadVideo(file)` que llama a `/api/upload-video`.
    - En “Tipo de fondo = Video”, se añadió el botón “Archivo video” (oculto input `type=file` con `accept=video/*`). Al subir, completa automáticamente el campo “Video de fondo (URL)”.

- Aplicar recorte/posicionamiento en el fondo de imagen:
  - Se actualizó `scripts/app.js` dentro de `createImg(...)` para invocar `applyImageDisplay(frame, img, srcOrObj)` y así respetar `image.crop` (zoom/offset/aspect) también cuando la imagen se usa como fondo. Antes, sólo se veía el recorte en secciones que usaban el `thumb` o aplicaban el crop explícitamente.

4) Archivos modificados (paths)
- server/editor-server.js
  - Nuevo Multer `videoUpload` (límite ~200MB) y endpoint `POST /api/upload-video`.
- scripts/editor.js
  - Nueva función `uploadVideo` y controles de UI “Archivo video” en el bloque “Tipo de fondo = Video”.
- scripts/app.js
  - En `createImg(...)` se aplican las transformaciones de recorte con `applyImageDisplay(...)` para que el fondo imagen respete zoom/offset.

5) Uso y consideraciones
- Subida de archivos requiere sesión admin (cookie `admin_session`).
- Flujo para fondo video: ahora se puede pegar una URL o subir archivo con “Archivo video”. El video subido queda en `/uploads/...`.
- Fondo imagen: el recorte/posicionamiento del editor ahora se refleja también en el fondo.

6) Análisis sobre recorte “en pantalla” para video (no implementado aún)
- Es posible lograr zoom y encuadre sin recodificar el archivo de video:
  - Reencuadre simple: `object-fit: cover` + `object-position: X% Y%` (controla la posición pero no el zoom real).
  - Recorte completo (zoom + encuadre): envolver el `<video>` en un contenedor con `overflow: hidden` y aplicar `transform: scale(zoom)` + `transform-origin: X% Y%` al `<video>`. Esto replica el modelo `{ zoom, offsetX, offsetY }` usado en imágenes.
- Efecto “relleno borroso” cuando el zoom o el encuadre dejan espacios:
  - Dos capas del mismo video: capa de fondo con `filter: blur(...)` y leve `transform: scale(...)` para cubrir, más la capa superior nítida con el zoom/encuadre.
  - Alternativa liviana: usar `poster` borroso como capa de fondo para ahorrar CPU en móviles.
- Datos sugeridos a guardar:
  - `theme.background.crop = { zoom, offsetX, offsetY, aspect? }`
  - `theme.background.backdrop = { blurPx, scale, dim }` (opcional) para configurar la capa borrosa.
- Editor (posible UI futura): sliders de Zoom (1–4), X (0–100%), Y (0–100%), y Blur (0–30px) para la capa de fondo. El usuario pidió no implementarlo aún; quedó sólo el diseño de la solución.

7) Estado actual
- Implementado:
  - Subida de videos desde el editor con botón “Archivo video”.
  - Arreglo para que el recorte de imagen se aplique también en el fondo.
- Pendiente (a pedido de no implementar todavía):
  - Zoom y encuadre “en pantalla” para video de fondo, y opción de capa borrosa de relleno.

8) Notas finales
- Si el usuario no está logueado como admin, la subida de archivos devuelve error (comportamiento esperado tras reforzar seguridad).
- La calidad del fondo imagen ahora es consistente con el resto del sitio al aplicar transformaciones; el `thumb` sigue usándose en tarjetas para rendimiento, pero el fondo puede usar la imagen completa con transform CSS.

