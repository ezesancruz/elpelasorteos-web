AUDITORÍA DE DISEÑO RESPONSIVO – elpelasorteos.shop

Objetivo
- Dejar la web perfectamente utilizable y agradable en móviles, sin solapamientos ni desbordes, manteniendo la excelencia ya lograda en escritorio.
- Asegurar que el fondo no “desplace” (no se mueva ni rompa el scroll), que la foto de perfil se centre correctamente en móvil, y que se eviten superposiciones, especialmente en las secciones de “detalleVisual”.

Alcance y método
- Se revisaron archivos centrales: index, CSS principal y renderizado dinámico del contenido.
  * index.html:5 – `<meta name="viewport" content="width=device-width, initial-scale=1" />`
  * styles/main.css (estilos base, layout, héroe, sliders y detalleVisual)
  * scripts/app.js (inyección de fondo, hero, detalleVisual y otros renderizadores)
- Se corrieron lecturas del CSS y JS para ubicar breakpoints, reglas de layout y potenciales fuentes de overflow.

Diagnóstico global (resumen)
- El fondo está bien planteado con capas fijas; no “desplaza” al hacer scroll (styles/main.css:35–43, 49–50). Sin embargo, se puede afinar el overlay y la aceleración para mayor suavidad en móviles.
- La foto de perfil en el héroe está posicionada de forma absoluta en desktop (styles/main.css:1198–1207) y en móvil sólo se reduce tamaño (styles/main.css:1227–1246). Falta reubicarla para centrarla vertical y horizontalmente en móviles, evitando solapamientos con el título.
- La tarjeta contenedora `.section` usa padding fijo (styles/main.css:148–156). En pantallas estrechas ese padding resta ancho útil y puede contribuir a que textos/medios “empujen” fuera de la tarjeta.
- En “detalleVisual”, el grid es correcto, pero faltan defensas típicas anti-desborde en ítems de grid (min-width: 0) y forzado de corte de palabras en párrafos para algunos contenidos (ver styles/main.css:404, 469). Eso explica casos de “texto afuera de la tarjeta” en móvil.
- Carouseles y secciones con media usan object-fit y aspect-ratio adecuadamente; no obstante, ajustes menores ayudarán a que la experiencia sea consistente en móviles chicos.

Fondo (citas y evaluación)
- Fijo por capas: styles/main.css:35–43
  #background-media,
  #background-overlay {
    position: fixed;
    inset: 0;
    pointer-events: none;
  }
  #background-media { z-index: 0; }
  #background-overlay { z-index: 1; }
- Medios ajustan a viewport: styles/main.css:49–50
  #background-media > video,
  #background-media > img { width: 100%; height: 100%; object-fit: cover; }
- Renderizado dinámico: scripts/app.js:124–132, 140–172
  Se crea/inserta `#background-media` y `#background-overlay`; para video se setean autoplay, muted, loop, playsinline.

Recomendaciones para el fondo
- Mantener fixed y pointer-events: none (ya ok). Añadir aceleración suave para evitar “lag” en algunos móviles:
  CSS sugerido:
  #background-media, #background-overlay { will-change: transform; transform: translateZ(0); }
- Si se usa overlay con color/blur en el futuro, garantizar z-index: 1 y opacidad controlada desde JS (scripts/app.js ya alterna opacidad; mantener ese patrón).

Héroe y foto de perfil (centrado en móvil)
- Posición absoluta desktop: styles/main.css:1198–1207
  .hero-body--with-profile .hero__profile-wrapper {
    position: absolute;
    bottom: 0;
    right: 0;
    width: 10rem; height: 10rem;
    z-index: 1;
  }
- En móvil (max-width: 767px) sólo cambia tamaño (styles/main.css:1241–1245), pero no se quita el posicionamiento absoluto, por eso no queda centrado ni fluye con el texto.

Recomendación concreta (centrado verdadero en móvil)
- Añadir un override móvil que vuelva el wrapper “estático” y lo centre antes del título:
  CSS sugerido:
  @media (max-width: 767px) {
    .hero-body { align-items: center; text-align: center; }
    .hero-body--with-profile .hero__profile-wrapper {
      position: static;
      margin: 0 auto 0.75rem;
      width: 7rem; height: 7rem;
    }
    .hero__title, .hero__subtitle, .hero-body .button-row, .hero-body .social-list {
      align-self: stretch;
      justify-content: center;
      text-align: center;
    }
  }
- Con esto, la foto queda centrada, no se superpone, y el resto del contenido se alinea de forma armónica en móvil.

Secciones “detalleVisual” (texto que se desborda en móvil)
- Estructura y grid: styles/main.css:404–423
  .section--detalleVisual { display: grid; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); gap: 1.75rem; }
  Reglas para invertir columnas y modo single están correctas.
- Párrafos: styles/main.css:469
  .imageHighlight__body p { line-height: 1.7; text-align: justify; ... }
- Renderizado: scripts/app.js:1114–1139 (modo simple) y 1023–1110 (modo slider)

Problema observado
- En móviles angostos y con padding interno elevado de `.section`, es más fácil que textos largos o palabras sin espacios “empujen” el layout. En grid/flex, si no se fuerza `min-width: 0` en los ítems, pueden aparecer desbordes horizontales. También faltan reglas de “corte” de palabras en el texto público (las actuales reglas de `overflow-wrap` aplican al panel editor, no al contenido: styles/main.css:920–924).

Recomendaciones concretas para detalleVisual
- Añadir defensas anti-desborde en contenedores de media y cuerpo:
  CSS sugerido:
  .section--detalleVisual .imageHighlight__media,
  .section--detalleVisual .imageHighlight__body { min-width: 0; }
  .imageHighlight__body p { overflow-wrap: anywhere; word-break: break-word; }
- En pantallas muy pequeñas, forzar una sola columna y reducir paddings globales para ganar ancho útil:
  CSS sugerido:
  @media (max-width: 480px) {
    .section { padding: 1rem; }
    .section-wrapper { padding: 0.75rem 0.75rem 3rem; }
    .section--detalleVisual { grid-template-columns: 1fr; }
  }

Tarjetas y rejillas (link-cards, ganadores)
- link-cards: styles/main.css:237–246, 251
  Uso de grid con `minmax(240px, 1fr)` más `overflow: hidden` en la tarjeta: correcto. Mantener y heredar defensas de corte de palabras para subtítulos largos si hiciera falta.
- winner-grid: styles/main.css:495–506
  Rejilla fluida con `minmax(260px, 1fr)`. Igual que arriba, se beneficia de `overflow-wrap:anywhere` si el contenido se genera dinámicamente.

Ajustes de padding y escalas tipográficas
- `.section` usa padding fijo (styles/main.css:148–156). En móviles chicos, conviene usar clamp o media queries para no perder ancho efectivo.
- Títulos ya usan clamp (styles/main.css:163–166) y se ven bien. Mantener enfoque.

Recomendaciones de padding responsivo
- Sustituir padding fijo por uno adaptable:
  CSS sugerido:
  .section { padding: clamp(1rem, 4vw, 2.5rem); }
  @media (max-width: 480px) {
    .top-nav { padding: 0.9rem 1rem; }
  }

Control global de overflow horizontal
- Ya existe `overflow-x: hidden` en body (styles/main.css:29). Aún así, el origen debe prevenirse en los hijos.
- Añadir utilidades y mínimos en contenedores clave (grids/flex) como se listó arriba.

Código sugerido (bloque consolidado para pegar al final de styles/main.css)
/* === Ajustes responsivos y anti-desborde (recomendados) === */
@media (max-width: 767px) {
  .hero-body { align-items: center; text-align: center; }
  .hero-body--with-profile .hero__profile-wrapper {
    position: static;
    margin: 0 auto 0.75rem;
    width: 7rem; height: 7rem;
  }
  .hero__title, .hero__subtitle, .hero-body .button-row, .hero-body .social-list {
    align-self: stretch; justify-content: center; text-align: center;
  }
}

@media (max-width: 480px) {
  .section { padding: 1rem; }
  .section-wrapper { padding: 0.75rem 0.75rem 3rem; }
  .section--detalleVisual { grid-template-columns: 1fr; }
  .top-nav { padding: 0.9rem 1rem; }
}

.section--detalleVisual .imageHighlight__media,
.section--detalleVisual .imageHighlight__body { min-width: 0; }
.imageHighlight__body p { overflow-wrap: anywhere; word-break: break-word; }

#background-media, #background-overlay { will-change: transform; transform: translateZ(0); }

Buenas prácticas adicionales verificados o sugeridos
- Mantener `<meta viewport>` (index.html:5) tal cual.
- Garantizar que todos los medios (img/video) rendericen con `display:block` y `max-width:100%` dentro de sus frames. Actualmente se asegura vía `[data-img-frame]` (styles/main.css:58–76, 426–450, 511–515) y `object-fit`.
- En sliders dv2, mantener `scroll-snap-type` y ocultar scrollbars (styles/main.css:363–377). Si se desea mejorar la accesibilidad, añadir `scroll-padding` para centrar el slide activo.

Testing y validación (checklist rápido)
- Ver en DevTools: 360×640, 390×844, 414×896, 430×932, 768×1024.
- Probar iOS Safari: foco en fixed layers (background) y el centrado del avatar.
- Revisar que en “detalleVisual” no aparezca texto saliéndose de la tarjeta en: 320px, 360px, 393px de ancho.
- Chequear que no exista scroll horizontal en ninguna vista.

Riesgos conocidos y mitigaciones
- iOS a veces limita videos en background (autoplay/power). scripts/app.js ya usa `playsinline` y lógica defensiva de reproducción. Aceptar que Safari puede pausar el video; el poster de fondo cubre el caso.
- Contenido externo con palabras muy largas/URLs: los cortes de palabra propuestos (`overflow-wrap:anywhere`) previenen desbordes.

Resumen final
- Con los overrides móviles para el héroe (centrado), defensas anti-desborde en `detalleVisual`, y padding responsivo en `.section`, se corrigen los problemas de superposición y rebalse en móviles manteniendo el look de escritorio.
- El fondo ya está correctamente fijado; se sugiere añadir una leve optimización con `translateZ(0)` para suavidad en ciertos dispositivos.

