Resumen de diagnóstico y resolución – Tarjeta “Validación”

1) Contexto inicial
- La tarjeta “Validación de participación” consulta `GET /api/payments/verificar?op=<numero>`.
- El backend Express ejecuta `microservices/integracion_mercadopago_app/scripts/query_payment.py` que lee `pagos.db` (SQLite) y responde JSON.
- En producción se observaba: “No se pudo comprobar ahora. Intentá más tarde.”

2) Limpieza y documentación (previo a la falla)
- Se eliminaron archivos `webv1.zip` y `diagnost*.txt` y se añadieron secciones de mantenimiento en README/INSTRUCTIVO.
- Se incorporó `tarjeta_validacion.txt` con explicación detallada de la tarjeta.

3) Infra y despliegue
- Caddy hace `reverse_proxy web:8080`.
- Dockerfile instala Python 3 y expone el puerto 8080; se agregó `PUPPETEER_SKIP_DOWNLOAD=1` y `HEALTHCHECK`.
- docker-compose.yml monta directorios de datos y microservicios y (opcionalmente) un bind-mount de `pagos.db` desde el host.

4) Error reproducido en el servidor
- La ruta de host para `pagos.db` apuntaba a un directorio (o a un archivo inexistente), de modo que dentro del contenedor, en lugar de un archivo, aparecía una carpeta `pagos.db`.
- Corrección: usar Opción A (montar sólo el directorio del microservicio) y asegurarse de que `pagos.db` exista en el host bajo `microservices/integracion_mercadopago_app/`.

5) Nuevo error al consultar la DB
- Aun con el archivo presente, el script devolvía: `Error DB: attempt to write a readonly database`.
- Causa raíz: SQLite con journal WAL necesita crear archivos `-wal/-shm`; al estar el directorio sin permisos de escritura para el usuario del contenedor, fallaba incluso en SELECT.

6) Fix aplicado en el script de verificación
- Archivo: `microservices/integracion_mercadopago_app/scripts/query_payment.py`.
- Estrategia aplicada:
  a) Copiar `pagos.db` a `/tmp/pagos_cache/pagos.db` (dentro del contenedor) si falta o si el origen cambió.
  b) Abrir primero en modo RO (`mode=ro`); si falla, fallback a conexión RW pero forzando `PRAGMA query_only=ON` (no modifica datos) para permitir sidecars WAL/SHM.
- Resultado: se elimina el error de “readonly” y las consultas funcionan.

7) Mejora en el endpoint para UX
- Archivo: `server/editor-server.js`.
- Cambios en `GET /api/payments/verificar`:
  - Validación de formato: ahora responde 200 con `{ verified:false, mensaje: 'Ingresá un número válido (6-24 dígitos).' }` (antes 400).
  - Errores del runner Python: ahora responden 200 con `{ verified:false, mensaje: 'No se pudo comprobar ahora. Intentá más tarde.' }`.
  - Objetivo: que el frontend muestre un mensaje específico y no caiga en el “genérico por HTTP !200”. No se altera la respuesta exitosa ni el contrato cuando hay verificación válida.

8) Verificación final en el servidor
- Comandos ejecutados (una línea, sin saltos):
  - `docker compose exec web sh -lc 'ls -l /app/microservices/integracion_mercadopago_app/pagos.db'`
  - `docker compose exec web sh -lc 'python /app/microservices/integracion_mercadopago_app/scripts/query_payment.py 130455149235 || true'`
  - `docker compose exec web sh -lc 'wget -qO- "http://127.0.0.1:8080/api/payments/verificar?op=130455149235"'`
- Resultado observado:
  - JSON correcto del script: `verified:true`, con fecha, monto, payer_name, description, mensaje.
  - JSON correcto del endpoint: se refleja el mismo contenido.

9) Notas operativas
- Si se desea mantener `pagos.db` fuera del repo, usar bind-mount archivo→contenedor con ruta ABSOLUTA del host (izquierda) y la ruta fija del contenedor (derecha). Asegurar permisos de lectura.
- Si se usa el directorio del microservicio (Opción A), basta con tener `pagos.db` en `microservices/integracion_mercadopago_app/` del host.
- Evitar pegar comandos con saltos de línea o espacios adicionales en medio de rutas/URLs.

10) Estado final
- La tarjeta “Validación” funciona en producción: consulta la API, el backend ejecuta el script, la DB se lee desde copia temporal y la respuesta llega al frontend.
- Si hay entradas inexistentes o formato inválido, el frontend ya no muestra fallo genérico y entrega el mensaje adecuado.

